generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// üß† User Model
//
model User {
  id          Int         @id @default(autoincrement())
  name        String?
  email       String      @unique
  password    String
  role        Role        @default(USER)
  inventories Inventory[] // üëà linked inventories
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum Role {
  ADMIN
  USER
}

//
// üõí Product Model
//
model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  stock       Int
  createdAt   DateTime    @default(now())
  inventories Inventory[]
  sales       Sale[]
  categoryId  Int?
  category    Category?   @relation(fields: [categoryId], references: [id])
  Alert       Alert[]
}

//
// üì¶ Inventory Model
//
model Inventory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // üîó relation to Product
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id])

  // üîó relation to User (fixes missing opposite relation)
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

//
// üíµ Sales Model
//
model Sale {
  id         Int      @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

//
// üóÇÔ∏è Category Model
//
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] // optional relation
}

//
// üè¢ Supplier Model
//
model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// ‚ö†Ô∏è Alert Model
//
model Alert {
  id        Int       @id @default(autoincrement())
  alertType AlertType
  message   String
  resolved  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

enum AlertType {
  EXPIRY
  STOCK
  FORECAST
}
